New Table ile column oluşturduğumuzda identity specificationu YES yaparsak birer birer artacak şekilde ayarlanır.
TEMEL KOMUTLAR;
Data Manipülasyon Komutları
(Select,INSERT,UPDATE,DELETE,TRUNCATE)
Veritabanı Manipülasyon komutları
(CREATE,ALTER,DROP)

SELECT --> Verileri seçmemize yarayan komuttur.

USE ETrade
SELECT* FROM CUSTOMERS

USE ETrade
SELECT ID,CUSTOMERNAME FROM CUSTOMERS

INSERT --> Tabloya yeni kayıtlar ekler

INSERT INTO CUSTOMERS (CUSTOMERNAME,CITY,BIRTHDATE,GENDER,DISTRICT)
VALUES ('Mehmet','Bursa','1880-02-12','e','Karacabey')

UPDATE --> Olan kaydı güncelleme

UPDATE CUSTOMERS SET NATION='TR'

SELECT DATEDIFF(YEAR,'1980-12-11','2020-01-01') --> Bu iki tarih arasındaki farkı yıl olarak yazar

GETDATE() --> ŞİMDİKİ TARİHİ ALIR

UPDATE CUSTOMERS SET NATION='TR', AGE=DATEDIFF(YEAR,BIRTHDATE,GETDATE())

DELETE -->Kayıt silmek için kullanılır

TRUNCATE--> Tablonun tüm verilerini siler ilk oluşturduğumuz hale getirir.

WHERE--> Komuta şart eklemek için kullanılır.

SELECT* FROM CUSTOMERS WHERE CUSTOMERNAME='Irmak TAHSİNOĞLU'

SELECT* FROM CUSTOMERS WHERE CITY='İZMİR'

SELECT* FROM CUSTOMERS WHERE NOT CITY ='İZMİR'

SELECT* FROM CUSTOMERS WHERE BIRTHDATE>'1990-01-01'

SELECT* FROM CUSTOMERS WHERE BIRTHDATE BETWEEN '1990-01-01' AND '2001-01-01'

SELECT* FROM CUSTOMERS WHERE CUSTOMERNAME LIKE 'ALİ%'

SELECT* FROM CUSTOMERS WHERE CUSTOMERNAME LIKE '%ALP'

SELECT* FROM CUSTOMERS WHERE CITY IN ('İSTANBUL', 'ANKARA', 'İZMİR')

UPDATE CUSTOMERS SET GENDER='KADIN' WHERE GENDER ='K'

AND-OR Komutları

SELECT * FROM CUSTOMERS WHERE CITY='İSTANBUL' AND DISTRICT='Beylikdüzü'

SELECT * FROM CUSTOMERS WHERE CITY='İSTANBUL' OR CITY='IZMIR'

'--' Yorum satırı yapmak için kullanılır

ORDER BY --> Sıralama işlemlerini yapar
DESC --> Büyükten küçüğe
ASC --> Küçükten büyüğe

SELECT * FROM CUSTOMERS ORDER BY ID DESC

SELECT * FROM CUSTOMERS ORDER BY CUSTOMERNAME ASC

SELECT * FROM CUSTOMERS WHERE CITY='İSTANBUL' ORDER BY CUSTOMERNAME

TOP --> Bir tabloda kaç satır görmek isteyeceğimizi ayarladığımız komut

SELECT TOP 100 * FROM CUSTOMERS ORDER BY CUSTOMERNAME

SELECT TOP 1 PERCENT * FROM CUSTOMERS ORDER BY CUSTOMERNAME

YEDEK DOSYADAN DATA AÇMA;
Databases(sağ click) -- Restore data -- Add data

AGGREGATE FUNCTIONS;

SELECT COUNT (*) FROM SALES -- SATIR SAYISI

SELECT * FROM SALES ORDER BY AMOUNT 

SELECT MIN(AMOUNT) FROM SALES -- MİNİMUM SATIŞ FİYAT

SELECT MIN(AMOUNT),MAX(AMOUNT),COUNT(FICHENO) FROM SALES

SELECT SUM(AMOUNT) FROM SALES -- TOPLAM SATIŞ

SELECT AVG(AMOUNT) FROM SALES -- ORTALAMA NE KADAR SATIŞ

GROUP BY KOMUTU;
BİR KOLONU DİĞER DEĞERLERE GÖRE GRUPLAYAN KOMUTTUR.
ÖR;
BİR ŞEHİRDEKİ SATIŞ SAYILARININ GRUPLANDIRILMASI

SELECT CITY, MIN(TOTALPRICE) AS MINPRICE,MAX(TOTALPRİ,ICE) AS MAXPRICE,COUNT(FICHENO) AS FICHNUMBER,SUM(TOTALPRICE) AS TOTALPRICE,AVG(TOTALPRICE) AS AVGPRICE  FROM SALES GROUP BY CITY


CONVERT FONKSİYONU HERHANGİ BİR VERİ TİPİNİ BAŞKA BİR VERİ TİPİNE DÖNÜŞTÜRÜR

SELECT CITY,DATE2,SUM(TOTALPRICE) AS TOTALPRICE FROM SALES WHERE CITY='ANKARA' GROUP BY CITY,DATE2

BİR GÜNÜN MAĞZA BAZLI SATIŞLARI

SELECT DATE2,CITY,SUM(TOTALPRICE) FROM SALES WHERE DATE2='2019-01-01' GROUP BY DATE2,CITY

WHERE DATEPART(MONTH,DATE2)=1 -- OCAK AYI OLANLARI SEÇER 

HAVING --> GROUP BY'dan sonra WHERE şartını kullanamıyacağımız için HAVİNG kullanılır

SELECT CITY,SUM(TOTALPRICE) FROM SALES GROUP BY CITY HAVING SUM(TOTALPRICE)<40000 ORDER BY SUM(TOTALPRICE) DESC

VERİ TİPLERİ:

İLİŞKİSEL VERİTABANI KAVRAMI:


CREATE TABLE --> Tablo oluşturur
DROP TABLE -->Tablo siler

SELECT USERS.*,ADRESS.ADRESSTEXT FROM USERS,ADRESS WHERE USERS.ID=ADDRESS.USERID AND USERS.ID=1

SELECT U.NAMESURNAME,U.EMAIL,U.GENDER,U.BIRTHDATE,A.ADDRESSTEXT FROM USERS U,ADDRESS A WHERE U.ID=A.USERID AND U.ID=4 
Bu kullanım bir alias kullanımıdır ve kodda karışıklığı önler bu sayede users tablosuna U, Adres Tablosuna A diyebiliriz

JOIN ON --> İki tabloyu ON komutundan sonraki şarta göre birleştirir. 

SELECT U.NAMESURNAME,U.EMAIL,A.ADDRESSTEXT,C.COUNTRY,CT.CITY FROM USERS U JOIN ADDRESS A ON A.USERID=U.ID
JOIN COUNTRIES C ON C.ID=A.COUNTRYID JOIN CITIES CT ON CT.ID= A.CITYID

INNER JOIN --> İki kümenin kesişimidir.
LEFT (OUTER) JOIN --> Sol kümenin tamamı + Kesişimleri

RIGHT (OUTER) JOIN --> Sağ kümenin tamamı + Kesişimleri

FULL JOIN --> İki kümenin birleşimini getiren kod

SELECT PAYMENTTYPE AS ODEMETURU 
CASE 
   WHEN PAYMENTTYPE=1 THEN 'KREDİ KARTI'
   WHEN PAYMENTTYPE=2 THEN 'BANKA HAVALESİ'
END AS ODEMETURU_ACIKLAMA
SUM(PAYMENTTOTAL) AS TOPLAMTUTAR
FROM PAYMENTS
GROUP BY PAYMENTTYPE

CASE--> OLMAYAN KOLONU GETİRMEK İÇİN KULLANILIR.

SUBQUERY KAVRAMI;

SELECT ITM.ITEMCODE AS URUNKODU, ITM.ITMNAME AS URUNADI
(SELECT MIN(UNITPRICE) FROM ORDERDETAILS WHERE ITEMID=ITM.ID) AS ENDUSUKFIYAT FROM ITEMS ITM ORDER BY ITM.ITEMNAME

STRING İŞLEMLERİ;
